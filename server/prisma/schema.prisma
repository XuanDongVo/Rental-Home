generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // extensions = [postgis]
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum LeaseStatus {
  Active
  Terminated
  Expired
  PendingTermination
}

enum TerminationRequestStatus {
  Pending
  Approved
  Rejected
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        Int
  managerCognitoId  String
  isDeleted         Boolean      @default(false)
  deletedAt         DateTime?

  location     Location      @relation(fields: [locationId], references: [id])
  manager      Manager       @relation(fields: [managerCognitoId], references: [cognitoId])
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
}

model Manager {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  managedProperties   Property[]
  notifications       Notification[]
  terminationRequests TerminationRequest[]
}

model Tenant {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  properties          Property[]           @relation("TenantProperties")
  favorites           Property[]           @relation("TenantFavorites")
  applications        Application[]
  leases              Lease[]
  notifications       Notification[]
  terminationRequests TerminationRequest[]
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id              Int               @id @default(autoincrement())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      Int
  tenantCognitoId String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         Int?              @unique

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantCognitoId], references: [cognitoId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id                Int         @id @default(autoincrement())
  startDate         DateTime
  endDate           DateTime
  rent              Float
  deposit           Float
  status            LeaseStatus @default(Active)
  terminationDate   DateTime?
  terminationReason String?
  propertyId        Int
  tenantCognitoId   String

  property            Property             @relation(fields: [propertyId], references: [id])
  tenant              Tenant               @relation(fields: [tenantCognitoId], references: [cognitoId])
  application         Application?
  payments            Payment[]
  terminationRequests TerminationRequest[]
}

model TerminationRequest {
  id               Int                      @id @default(autoincrement())
  reason           String
  requestDate      DateTime                 @default(now())
  status           TerminationRequestStatus @default(Pending)
  managerResponse  String?
  responseDate     DateTime?
  leaseId          Int
  tenantCognitoId  String
  managerCognitoId String?

  lease   Lease    @relation(fields: [leaseId], references: [id])
  tenant  Tenant   @relation(fields: [tenantCognitoId], references: [cognitoId])
  manager Manager? @relation(fields: [managerCognitoId], references: [cognitoId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float         @default(0)
  dueDate       DateTime
  paymentDate   DateTime?
  paymentStatus PaymentStatus @default(Pending)
  leaseId       Int

  lease Lease @relation(fields: [leaseId], references: [id])
}

enum NotificationType {
  ApplicationSubmitted
  ApplicationApproved
  ApplicationDenied
  PaymentDue
  PaymentReceived
  PaymentOverdue
  MaintenanceRequest
  LeaseExpiring
  NewMessage
  PropertyUpdated
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data như propertyId, applicationId, etc.
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Recipients - chỉ một trong hai sẽ có giá trị
  tenantCognitoId  String?
  managerCognitoId String?

  // Relations
  tenant  Tenant?  @relation(fields: [tenantCognitoId], references: [cognitoId])
  manager Manager? @relation(fields: [managerCognitoId], references: [cognitoId])
}

model NotificationPreference {
  id            Int     @id @default(autoincrement())
  userCognitoId String  @unique
  emailEnabled  Boolean @default(true)
  pushEnabled   Boolean @default(true)
  smsEnabled    Boolean @default(false)

  // Notification type preferences
  applicationNotifications Boolean @default(true)
  paymentNotifications     Boolean @default(true)
  maintenanceNotifications Boolean @default(true)
  messageNotifications     Boolean @default(true)
}
